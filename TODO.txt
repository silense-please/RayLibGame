--DONE
mb array[10] to count average fps
test button inputs and gamepad - working
make fps independent game loop (with sf::Clock i guess)
divide code to different cpp files
window resizing - use render target texture - DONE
screen scaling
recreate everything from sfml template
character control (inputs) - add input method choosing (gamepad 1, gamepad 2, keyboard?) and current detected gamepads
divide code to funtions and structs(like: Playerstruct, draw_debugging_metrics, draw, toggle_fps_lock, ...)
level editor (in txt for now)
movement collision
Big input refactor & unhardcode player inputs
camera - side-scrolling
pause system (and UI)
 gravity and jumps
make good jumps https://www.youtube.com/watch?v=Mo1-sKYbks0 https://www.youtube.com/watch?v=7KiK0Aqtmzc&t=216s
basic animation system


--IN PROGRESS
sound (witness) system (sorry)

--TODO - make test game (engine demo) - КОРОЧЕ ДЕЛАЙ УЖЕ МЕХАНИКИ ИГРЫ, А ВСЯКИЕ ВТОРОСТЕПЕННЫЕ МЕНЮ ПОТОМ
event triggers in level , text in level (somewhere between the sacred ...)
make RPG-7
debug mode on/off switch

Make button input config (txt) file and load bindings from it
Cleanup after "engine v1" done - sweep comments, restructure, fill declaration.cpp, make "debug" and release game mode e.t.c
compile release build and test it on VM and then on dimkanet's PC

--REVERSE
    objects
    player
    audio

--AUDIO PROBLEM - HOW TO REVERSE IT ? - ffmpeg?, SDL?, miniaudio low level API? (scary), BASS audio lib, RubberBand
better not to reverse audio, but play it with changed pitch(a.k.a tempo) to -1, so we can also slow down or speed up sound
    almost everywhere (incl raylib) pitch minimum is >0 so they cant play sounds in reverse


add hot reloading system via dlls for debugging (TSoding)
rebuild(refactor) player accelerations to the real vectors
mb collisions can be improved (collide by speed vectors) (the corners, step on platform if almost jumped high enough)
Texture loading and unloading system (or just a separate file of loads) and characters' ids system to link them with texture
different game "scenes" - levels basically

pull out Raylib's update and draw (delta)time alike GetFrameTime() to measure performance costs (from rcore.c)
draw text stats&metrics for debug
error handling and output - "falied to load ..." (investigate what is try/catch)
write tests (unittests i guess (do I need them?))
saves - game state (serialization?)
timestamps - UPS - game logic(physics etc) has to update at fixed rate (60 per sec) - not necessary
    (implement using " if(deltatime==1/60sec) -> do game logic" ???)
make custom delta_time for game logic (to be able to invert ime without breaking gameloop)
move player coordinates to the center of body?
refactor "1 time used functions" into { "blocks of code" and also separate standalone blocks with {} - for code clarity
                                    }
maybe consider more jump help like edge detection -  https://youtu.be/3sWTzMsmdx8?si=aEuX8x2OJ8Y_qTnX&t=109
                                                    https://youtu.be/Bsy8pknHc0M?si=3_uyQANwHjnAYpNt&t=157
find out how to reverse sounds (without duplicating every sound in reverse and swapping them - it will be a nightmare)

try level editors - LDtk, Tiled
try OpenGL integration
try online sockets
try Box2D physics (or Chipmunk2D)
maybe make rez options (with buttons only for now)
refctor - maybe write corresponding declaration in it's modules - draw, load, e.t.c (to reduce coupling)
try to "static link mingw32 libraries" i guess - put all dll libs into exe file for release/shipping
    https://youtu.be/fVJHmGPfsEk?si=919unMBLcmKsRhUf&t=470
try raylib SDL backend (for better fullscreening )- setup - https://youtu.be/CfeHFIP_xEI?si=SpnQzOm76Wk5GqeW&t=994


--Problems:
   -Screen tearing occurs when Vsync is off - I cant find VRR option in OpenGL - to render any fps(1000) without tearing
        (e.g. in Hollow Knight there is no tearing no matter fps: 30 - 300, vsync off, on second 60Hz monitor)
        I kinda want game to run at 500 fps without tearing (or ANY issues), but i guess its okay to just Vsync it
   -Window crashes when audio output device is changed (miniaudio.h "ma_IAudioClient_Start" - line ~20258)
        miniaudio crashes (in any version) only in raylib - miniaudio (github page) examples work just fine ???
        need to investigate further in raylib - in InitAudioDevice() i guess (need to learn how to debug properly)
        (try to use miniaudio in game window without raylib's methods such as InitAudio) (raylib 5.0 still crashes)
        https://github.com/mackron/miniaudio/issues/764
        In miniaudio default device changing in: ma_device_reinit__wasapi() -> ma_device_init_internal__wasapi()
        ma_device_audio_thread__default_read_write() - main loop for audio
        ma_CoCreateInstance() in ma_context_get_MMDevice__wasapi() FAILS (dig deeper)
        !!!FIXED(workaround) - https://github.com/karl-zylinski/raylib/commit/7a38578c89baf5f3c1d2e20250757b0301dc2643?diff=unified&w=1
        
   -Audio system is broken - on 1500+ fps there is a small digital noise regardless of volume, even if muted - WTF
   -Fix ToggleFullscreen by implementing code from SetWindowMonitor(which is sets fullscreen too in fact)
   -Performance slowdown - might be a bottleneck(probably fine) - when on primary 1440p display in borderless mode
        fps is dropping form ~2500 to ~1700, frametime: ~0,3-4ms to ~0,5ms, in ToggleFullscreen() it's rising up to 3000fps!
        Found the cause - nvidia shadowplay! (it's switching to game window in borderless)- slowing ~33% performance
        (on high framerates) (only primary monitor) (slows down even when overlay is off)
    
   -Initial resolution and aspect ratio is hardcoded - might need resize_texture2d
   -Txt level dimensions are hardcoded (maybe just expand them - MAX_DIMENSIONS)
   -Cursor is disappearing in borderless with discord or OBS - Well... what can I do?
   -FPS Monitor (sometimes?) crashes SFML window upon closing FPS Monitor
   -Pushing out of stuck in static_object_collision() don't work properly


Don't be afraid to delete parts of code!
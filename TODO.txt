--DONE
mb array[10] to count average fps
test button inputs and gamepad - working
make fps independent game loop (with sf::Clock i guess)
divide code to different cpp files
window resizing - use render target texture - DONE
screen scaling
recreate everything from sfml template
character control (inputs) - add input method choosing (gamepad 1, gamepad 2, keyboard?) and current detected gamepads
divide code to funtions and structs(like: Playerstruct, draw_debugging_metrics, draw, toggle_fps_lock, ...)
level editor (in txt for now)
movement collision
Big input refactor & unhardcode player inputs
camera - side-scrolling
pause system (and UI)
 gravity and jumps
make good jumps https://www.youtube.com/watch?v=Mo1-sKYbks0 https://www.youtube.com/watch?v=7KiK0Aqtmzc&t=216s
animation system and grouping

--IN PROGRESS
Ремувай рендер текстуру нахер, скейли зумом камеры (чтоб зум как в backups\PLAYER_SCALE.PNG), (потом) добавь 16/10 и леттербоксинг для остальных соотношений либо стетч картинки рендер текстурой уже пост фактум - чтоб рендер текстура инчего не скейлила
(А как текст скейлить???) можно растягивать рендер текстурой и фигачить поверх всего в конце дроу, только не делать ClearBackground чтоб оно накладывалось поверх фрейма - криво будет, растягивай вручную

make RPG-7
add left stick movement

--TODO - make test game (engine demo) - КОРОЧЕ ДЕЛАЙ УЖЕ МЕХАНИКИ ИГРЫ, А ВСЯКИЕ ВТОРОСТЕПЕННЫЕ МЕНЮ ПОТОМ
event triggers in level , text in level (somewhere between the sacred ...)
sound (witness) system (sorry)
(FULL) debug mode on/off switch

--FINISH DEMO
Make button input config (txt) file and load bindings from it
Cleanup after "engine v1" done - sweep comments, restructure, fill declaration.cpp, make "debug" and release game mode e.t.c
windows icon?
compile release build and test it on VM and then on dimkanet's PC
LATER-try to build for android lol (bad idea, it'll be exhausting)

--REVERSE
    objects
    player
    audio

--AUDIO PROBLEM - HOW TO REVERSE IT ? - ffmpeg? - NO, SDL? - NO, miniaudio low level API? (scary),OpenAL?, BASS audio lib
clues - Braid is using OGG, so we can reverse ogg's audio stream i guess. Or probably WAV is the easiest?
better not to reverse audio, but play it with changed pitch(a.k.a tempo) to -1, so we can also slow down or speed up sound
    almost everywhere (incl raylib) pitch minimum is >0 so they cant play sounds in reverse
https://github.com/benjamin-ab/Sound-Reverse/blob/master/reverse.c - NO, this just reverses whole track before outputting

--ANIMATIONS & STUFF
JUST LEAVE RESOLUTION HARDCODED TO 720p FOR NOW, ITS FINE. mb fix camera jittering later.
сделать анимацию прыжка повыразительнее, чтобы он башкой тряс - как в холлоу найте ( и с одной ноги начинать прыгать)
jump start amination -  ноги поджимать при начале прыжка

--AFTER DEMO:
Подогнать все размеры спрайтов и игрока под "зум = 1" по умолчанию
Try to reverse (play with) audio in standalone miniaudio test app
How to include windows.h without funcs duplicating error?
add proper flags (to player struct?) to player for switching animations and stuff - started_jump/walking/idle/falling
add draw smoothing to fast projectiles (e.g.rockets) - https://youtu.be/pnhJ5SDZpGU?si=scXMy6RU2_zMpQfC - TSoding
add hot reloading system via dlls for debugging (TSoding, Karl Zylinski)
rebuild(refactor) player accelerations to the real vectors
mb collisions can be improved (collide by speed vectors) (the corners, step on platform if almost jumped high enough)
Texture loading and unloading system (or just a separate file of loads) and characters' ids system to link them with texture
different game "scenes" - levels basically
Add windows letterboxing option

pull out Raylib's update and draw (delta)time alike GetFrameTime() to measure performance costs (from rcore.c line 880)
draw text stats&metrics for debug
error handling and output - "falied to load ..." (investigate what is try/catch (throw)) - or assert??? - Yea, use asserts (__FILE__ and __LINE__ will be helpfull)
write tests (unittests i guess (do I need them?))
saves - game state (serialization?)
timestamps - UPS - game logic(physics etc) has to update at fixed rate (60 per sec) - not necessary
    (implement using " if(deltatime==1/60sec) -> do game logic" ???)
make custom delta_time for game logic (to be able to invert ime without breaking gameloop)
move player coordinates to the center of body?
refactor "1 time used functions" into { "blocks of code" and also separate standalone blocks with {} - for code clarity
                                    }
maybe consider more jump help like edge detection -  https://youtu.be/3sWTzMsmdx8?si=aEuX8x2OJ8Y_qTnX&t=109
                                                    https://youtu.be/Bsy8pknHc0M?si=3_uyQANwHjnAYpNt&t=157
find out how to reverse sounds (without duplicating every sound in reverse and swapping them - it will be a nightmare)
pack structs efficiently??? (alignment, packing, padding) - to reduce reverse data in memory

try level editors - LDtk, Tiled, or make custom w/ Dear-ImGUI/raylib (Are you insane!?), or wait for new raylib Editor...
try OpenGL integration
try online sockets
try Box2D physics (or Chipmunk2D)
maybe make rez options (with buttons only for now)
refctor - maybe write corresponding declaration in it's modules - draw, load, e.t.c (to reduce coupling)
try to "static link mingw32 libraries" i guess - put all dll libs into exe file for release/shipping
    https://youtu.be/fVJHmGPfsEk?si=919unMBLcmKsRhUf&t=470
try raylib SDL backend (for better fullscreening )- setup - https://youtu.be/CfeHFIP_xEI?si=SpnQzOm76Wk5GqeW&t=994
try to build project with bash file instead of CMake, like in handmade hero 
    (and call raylib's cmake if it needs to be rebuilt?? or just call&rebuild raylib from clion)
    

-- Raylib stuff:
Raylib tracelog toggle: utils.c -line 62 - maybe toggle raylib's log messages in some game config file (later)
GetTime() doesn't stop counting even on program pause/break! Wow.
screen recording (CTRL + F12) is broken ?? slows down fps to ~10 (???) - but actually doesn't break game - turn off?
raylib supports OpenGl 4.3 ? then why does it runs on 3.3 now? -try 4.3, maybe it's faster
    https://github.com/raysan5/raylib/wiki/raylib-platforms-and-graphics


--Performance:
Clock resolution of measure_time  ~ <= 0.2us (microsecond), raylib's GetTime() resolution = ~ 0.1-0.2us (WIN 10) which
uses windows' QueryPerformanceCounter() - whose resolution = 0.1us
maybe try later "__rdtsc()" (asm opcode RDTSC) - resolution < 10ns !!! (deeper asm knoledge needed)
As of 15.06.24 game runs at ~400us (microseconds) each frame, 500us if dragging mouse (+100us if moving fast, only windowed),
    450us if borderless, 650us if Nvidia Shadowplay - measured by custom measure_time() prototype profiling func
    Dont want to drop below 1ms(1000fps) on my pc, so look out for bottlenecks.
15.06.24 - ~0.5ms
...

DO NOT OPTIMIZE PREMATURELY, IT'S A WASE OF TIME, PERFORMANCE SENSITIVE CODE IS ~10% - JBlow. OPTIMISE AFTER SOLDOWN STARTS.
--Problems:
   -Screen tearing occurs when Vsync is off - I cant find VRR option in OpenGL - to render any fps(1000) without tearing
        (e.g. in Hollow Knight there is no tearing no matter fps: 30 - 300, vsync off, on second 60Hz monitor)
        I kinda want game to run at 500 fps without tearing (or ANY issues), but i guess its okay to just Vsync it
   -Window crashes when audio output device is changed (miniaudio.h "ma_IAudioClient_Start" - line ~20258)
        miniaudio crashes (in any version) only in raylib - miniaudio (github page) examples work just fine ???
        need to investigate further in raylib - in InitAudioDevice() i guess (need to learn how to debug properly)
        (try to use miniaudio in game window without raylib's methods such as InitAudio) (raylib 5.0 still crashes)
        https://github.com/mackron/miniaudio/issues/764
        In miniaudio default device changing in: ma_device_reinit__wasapi() -> ma_device_init_internal__wasapi()
        ma_device_audio_thread__default_read_write() - main loop for audio
        ma_CoCreateInstance() in ma_context_get_MMDevice__wasapi() FAILS (dig deeper)
        !!!FIXED(workaround) - https://github.com/karl-zylinski/raylib/commit/7a38578c89baf5f3c1d2e20250757b0301dc2643?diff=unified&w=1
        
   -Audio system is broken - on 1500+ fps there is a small digital noise regardless of volume, even if muted - WTF
   -Fix ToggleFullscreen by implementing code from SetWindowMonitor(which is sets fullscreen too in fact)
   -Black flash when alt tabbing - in borderless - glfw jerking around, or Windows.
   -Performance slowdown - might be a bottleneck(probably fine) - when on primary 1440p display in borderless mode
        fps is dropping form ~2500 to ~1700, frametime: ~0,3-4ms to ~0,5ms, in ToggleFullscreen() it's rising up to 3000fps!
        Found the cause - nvidia shadowplay! (it's switching to game window in borderless)- slowing ~33% performance
        (on high framerates) (only primary monitor) (slows down even when overlay is off)
    
   -Initial resolution and aspect ratio is hardcoded - might need resize_texture2d
   -Txt level dimensions are hardcoded (maybe just expand them - MAX_DIMENSIONS)
   -Cursor is disappearing in borderless with discord or OBS - Well... what can I do?
   -FPS Monitor (sometimes?) crashes SFML window upon closing FPS Monitor
   -Pushing out of stuck in prevent_collision_stuck() don't work properly
   -Crash of miniaudio? Game just froze and crashed after a while(running ~2min max)
       maybe just Windows is memeing -lot of apps were opened , OR maybe I need to get rid of miniaudio
           Assertion failed!
           Program: D:\!!!Projects\CPP\RayLibGame\cmake-build-debug\RayLibGame.exe
           File: D:/!!!Projects/CPP/RayLibGame/raylib/src/external/miniaudio.h, Line 51578
           Expression: pResampler->inTimeInt == 0
           Process finished with exit code 3


Don't be afraid to delete parts of code!
